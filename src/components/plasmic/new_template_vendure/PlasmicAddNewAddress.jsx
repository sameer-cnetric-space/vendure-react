// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hGXuZyzubCg89KNadA76kG
// Component: n-YEF70CyBS3Nn
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import Button from "../../Button"; // plasmic-import: AHmQZeuRNXKDJT/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import Select from "../../Select"; // plasmic-import: fFEopN_-lUf6Cj/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_new_template_vendure.module.css"; // plasmic-import: hGXuZyzubCg89KNadA76kG/projectcss
import sty from "./PlasmicAddNewAddress.module.css"; // plasmic-import: n-YEF70CyBS3Nn/css
import FrameIcon from "./icons/PlasmicIcon__Frame"; // plasmic-import: HKcCIpauuB9CGm/icon
import Frame2Icon from "./icons/PlasmicIcon__Frame2"; // plasmic-import: m4v5BuZET3af0x/icon
import Frame3Icon from "./icons/PlasmicIcon__Frame3"; // plasmic-import: gfo1RJd54zPXVx/icon
import Frame4Icon from "./icons/PlasmicIcon__Frame4"; // plasmic-import: OiKd2RcJwoXpl_/icon
import Frame5Icon from "./icons/PlasmicIcon__Frame5"; // plasmic-import: P2rc9Q1TWVaB44/icon
import Frame6Icon from "./icons/PlasmicIcon__Frame6"; // plasmic-import: Dd9xfOskzbTivN/icon
import Frame7Icon from "./icons/PlasmicIcon__Frame7"; // plasmic-import: p2GNwuTvHzmKNe/icon
import Frame8Icon from "./icons/PlasmicIcon__Frame8"; // plasmic-import: FNI9-QXSpX_HrN/icon
import Frame9Icon from "./icons/PlasmicIcon__Frame9"; // plasmic-import: zkSQt1vk-MZjmD/icon
import Frame10Icon from "./icons/PlasmicIcon__Frame10"; // plasmic-import: dkJYLT93Q85JOK/icon

export const PlasmicAddNewAddress__VariantProps = new Array();

export const PlasmicAddNewAddress__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAddNewAddress__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectCountry.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <GraphqlFetcher
            data-plasmic-name={"graphQlFetcher"}
            data-plasmic-override={overrides.graphQlFetcher}
            className={classNames("__wab_instance", sty.graphQlFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"POST"}
            noLayout={false}
            query={{
              query:
                "query MyQuery($name: String) {\n  characters(filter: {name: $name}) {\n    results {\n      name\n      species\n      image\n    }\n  }\n}\n",
              variables: { name: "Rick Sanchez" }
            }}
            url={"https://rickandmortyapi.com/graphql"}
            varOverrides={{}}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      data-plasmic-name={"frame20"}
                      data-plasmic-override={overrides.frame20}
                      className={classNames(projectcss.all, sty.frame20)}
                    >
                      <div
                        data-plasmic-name={"frame21"}
                        data-plasmic-override={overrides.frame21}
                        className={classNames(projectcss.all, sty.frame21)}
                      >
                        <div
                          data-plasmic-name={"frame22"}
                          data-plasmic-override={overrides.frame22}
                          className={classNames(projectcss.all, sty.frame22)}
                        >
                          <div
                            data-plasmic-name={"newFeatured2"}
                            data-plasmic-override={overrides.newFeatured2}
                            className={classNames(
                              projectcss.all,
                              sty.newFeatured2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zA7Z
                              )}
                            >
                              {"New & Featured"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"men2"}
                            data-plasmic-override={overrides.men2}
                            className={classNames(projectcss.all, sty.men2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pegLz
                              )}
                            >
                              {"Men"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"women2"}
                            data-plasmic-override={overrides.women2}
                            className={classNames(projectcss.all, sty.women2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1Yzsv
                              )}
                            >
                              {"Women"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"kids2"}
                            data-plasmic-override={overrides.kids2}
                            className={classNames(projectcss.all, sty.kids2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l16Ro
                              )}
                            >
                              {"Kids"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"sale2"}
                            data-plasmic-override={overrides.sale2}
                            className={classNames(projectcss.all, sty.sale2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nh0Ot
                              )}
                            >
                              {"Sale"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"snkrs2"}
                            data-plasmic-override={overrides.snkrs2}
                            className={classNames(projectcss.all, sty.snkrs2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__p8Ph
                              )}
                            >
                              {"SNKRS"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame23"}
                          data-plasmic-override={overrides.frame23}
                          className={classNames(projectcss.all, sty.frame23)}
                        >
                          <div
                            data-plasmic-name={"frame24"}
                            data-plasmic-override={overrides.frame24}
                            className={classNames(projectcss.all, sty.frame24)}
                          >
                            <div
                              data-plasmic-name={"frame25"}
                              data-plasmic-override={overrides.frame25}
                              className={classNames(
                                projectcss.all,
                                sty.frame25
                              )}
                            >
                              <div
                                data-plasmic-name={"frame26"}
                                data-plasmic-override={overrides.frame26}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame26
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame27"}
                                  data-plasmic-override={overrides.frame27}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame27
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"search2"}
                                    data-plasmic-override={overrides.search2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.search2
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__t2Jk9
                                      )}
                                    >
                                      {"Search"}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"autoLayoutHorizontal7"}
                                data-plasmic-override={
                                  overrides.autoLayoutHorizontal7
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.autoLayoutHorizontal7
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame28"}
                                  data-plasmic-override={overrides.frame28}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame28
                                  )}
                                >
                                  <FrameIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__j8Xaw
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"autoLayoutHorizontal8"}
                            data-plasmic-override={
                              overrides.autoLayoutHorizontal8
                            }
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.autoLayoutHorizontal8
                            )}
                          >
                            <div
                              data-plasmic-name={"autoLayoutHorizontal9"}
                              data-plasmic-override={
                                overrides.autoLayoutHorizontal9
                              }
                              className={classNames(
                                projectcss.all,
                                sty.autoLayoutHorizontal9
                              )}
                            >
                              <div
                                data-plasmic-name={"frame29"}
                                data-plasmic-override={overrides.frame29}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame29
                                )}
                              >
                                <Frame2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__pFmF
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"autoLayoutHorizontal10"}
                              data-plasmic-override={
                                overrides.autoLayoutHorizontal10
                              }
                              className={classNames(
                                projectcss.all,
                                sty.autoLayoutHorizontal10
                              )}
                            >
                              <div
                                data-plasmic-name={"frame30"}
                                data-plasmic-override={overrides.frame30}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame30
                                )}
                              >
                                <Frame3Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sKb1M
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          </p.Stack>
                          <div
                            data-plasmic-name={"frame31"}
                            data-plasmic-override={overrides.frame31}
                            className={classNames(projectcss.all, sty.frame31)}
                          >
                            <Frame4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1Nr8
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame32"}
                        data-plasmic-override={overrides.frame32}
                        className={classNames(projectcss.all, sty.frame32)}
                      >
                        <div
                          data-plasmic-name={"frame33"}
                          data-plasmic-override={overrides.frame33}
                          className={classNames(projectcss.all, sty.frame33)}
                        >
                          <Frame5Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fMlFq
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <div
                      data-plasmic-name={"container"}
                      data-plasmic-override={overrides.container}
                      className={classNames(projectcss.all, sty.container)}
                    />

                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      <div
                        data-plasmic-name={"group"}
                        data-plasmic-override={overrides.group}
                        className={classNames(projectcss.all, sty.group)}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__r4RX
                          )}
                          link={`/account-page`}
                        >
                          {"BACK"}
                        </Button>
                        <div
                          data-plasmic-name={"titleHeader"}
                          data-plasmic-override={overrides.titleHeader}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.titleHeader
                          )}
                        >
                          {"ADD NEW ADDRESS"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    className={classNames("__wab_instance", sty.form)}
                    extendedOnValuesChange={p.generateStateOnChangeProp(
                      $state,
                      ["form", "value"]
                    )}
                    formItems={[
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ]}
                    labelCol={{ span: 8, horizontalOnly: true }}
                    layout={"vertical"}
                    mode={undefined}
                    submitSlot={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__dK2Bn
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4Bt4T
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    }
                    wrapperCol={{ span: 16, horizontalOnly: true }}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___14XHd
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bQtPt
                          )}
                        >
                          {"First Name"}
                        </div>
                      }
                      name={"name"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__p3Ykd
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__msBtc
                          )}
                        >
                          {"Last Name"}
                        </div>
                      }
                      name={"message"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.textArea),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["textArea", "value"],
                              AntdTextArea_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "textArea",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea.value"
                            }
                          ],

                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea"}
                            data-plasmic-override={overrides.textArea}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xlXv8
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aLOo
                          )}
                        >
                          {"Address1"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input2", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__s5TYc
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lJLew
                          )}
                        >
                          {"Address2"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input3", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nan2H
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fnn0T
                          )}
                        >
                          {"City"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__wuz0E
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qGwhE
                          )}
                        >
                          {"Country"}
                        </div>
                      }
                    >
                      <Select
                        data-plasmic-name={"selectCountry"}
                        data-plasmic-override={overrides.selectCountry}
                        className={classNames(
                          "__wab_instance",
                          sty.selectCountry
                        )}
                        onChange={(...eventArgs) => {
                          p.generateStateOnChangeProp($state, [
                            "selectCountry",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null }
                          ];

                          __composite["0"]["value"] = "INDIA";
                          __composite["0"]["label"] = "INDIA";
                          __composite["1"]["value"] = "USA";
                          __composite["1"]["label"] = "USA";
                          return __composite;
                        })()}
                        placeholder={"Select country"}
                        value={p.generateStateValueProp($state, [
                          "selectCountry",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__lIK6
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yIfL
                          )}
                        >
                          {"Zip"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dsr4S
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0ReaF
                          )}
                        >
                          {"Province"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input8),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xn5Fu
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vndXu
                          )}
                        >
                          {"Phone"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input7", "value"],
                              AntdInput_Helpers
                            ),
                          type: "tel",
                          value: p.generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames("__wab_instance", sty.button__avBh)}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qtJjm
                        )}
                      >
                        {"ADD ADDRESS"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                  <div
                    data-plasmic-name={"frame34"}
                    data-plasmic-override={overrides.frame34}
                    className={classNames(projectcss.all, sty.frame34)}
                  >
                    <div
                      data-plasmic-name={"frame2"}
                      data-plasmic-override={overrides.frame2}
                      className={classNames(projectcss.all, sty.frame2)}
                    >
                      <div
                        data-plasmic-name={"frame3"}
                        data-plasmic-override={overrides.frame3}
                        className={classNames(projectcss.all, sty.frame3)}
                      >
                        <div
                          data-plasmic-name={"frame4"}
                          data-plasmic-override={overrides.frame4}
                          className={classNames(projectcss.all, sty.frame4)}
                        >
                          <div
                            data-plasmic-name={"frame5"}
                            data-plasmic-override={overrides.frame5}
                            className={classNames(projectcss.all, sty.frame5)}
                          >
                            <div
                              data-plasmic-name={"frame6"}
                              data-plasmic-override={overrides.frame6}
                              className={classNames(projectcss.all, sty.frame6)}
                            >
                              <div
                                data-plasmic-name={"findAStore"}
                                data-plasmic-override={overrides.findAStore}
                                className={classNames(
                                  projectcss.all,
                                  sty.findAStore
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8LwtF
                                  )}
                                >
                                  {"Find A Store"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"becomeAMember"}
                                data-plasmic-override={overrides.becomeAMember}
                                className={classNames(
                                  projectcss.all,
                                  sty.becomeAMember
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tTswB
                                  )}
                                >
                                  {"Become A Member"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"signUpForEmail"}
                                data-plasmic-override={overrides.signUpForEmail}
                                className={classNames(
                                  projectcss.all,
                                  sty.signUpForEmail
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3EWwe
                                  )}
                                >
                                  {"Sign Up for Email"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"sendUsFeedback"}
                                data-plasmic-override={overrides.sendUsFeedback}
                                className={classNames(
                                  projectcss.all,
                                  sty.sendUsFeedback
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kh4Bm
                                  )}
                                >
                                  {"Send Us Feedback"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"studentDiscounts"}
                                data-plasmic-override={
                                  overrides.studentDiscounts
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.studentDiscounts
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cakoN
                                  )}
                                >
                                  {"Student Discounts"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"frame7"}
                            data-plasmic-override={overrides.frame7}
                            className={classNames(projectcss.all, sty.frame7)}
                          >
                            <div
                              data-plasmic-name={"frame8"}
                              data-plasmic-override={overrides.frame8}
                              className={classNames(projectcss.all, sty.frame8)}
                            >
                              <div
                                data-plasmic-name={"getHelp"}
                                data-plasmic-override={overrides.getHelp}
                                className={classNames(
                                  projectcss.all,
                                  sty.getHelp
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__y2WVz
                                  )}
                                >
                                  {"Get Help"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"orderStatus"}
                                data-plasmic-override={overrides.orderStatus}
                                className={classNames(
                                  projectcss.all,
                                  sty.orderStatus
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__l8I2X
                                  )}
                                >
                                  {"Order Status"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"delivery"}
                                data-plasmic-override={overrides.delivery}
                                className={classNames(
                                  projectcss.all,
                                  sty.delivery
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__q4I6T
                                  )}
                                >
                                  {"Delivery"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"returns"}
                                data-plasmic-override={overrides.returns}
                                className={classNames(
                                  projectcss.all,
                                  sty.returns
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fmXC
                                  )}
                                >
                                  {"Returns"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"paymentOptions"}
                                data-plasmic-override={overrides.paymentOptions}
                                className={classNames(
                                  projectcss.all,
                                  sty.paymentOptions
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__n8NLv
                                  )}
                                >
                                  {"Payment Options"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={
                                  "contactUsOnNikecomInquiries"
                                }
                                data-plasmic-override={
                                  overrides.contactUsOnNikecomInquiries
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.contactUsOnNikecomInquiries
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hLb
                                  )}
                                >
                                  {"Contact Us On Nike.com Inquiries"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={
                                  "contactUsOnAllOtherInquiries"
                                }
                                data-plasmic-override={
                                  overrides.contactUsOnAllOtherInquiries
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.contactUsOnAllOtherInquiries
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__w9Soy
                                  )}
                                >
                                  {"Contact Us On All Other Inquiries"}
                                </div>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"frame9"}
                            data-plasmic-override={overrides.frame9}
                            className={classNames(projectcss.all, sty.frame9)}
                          >
                            <div
                              data-plasmic-name={"frame10"}
                              data-plasmic-override={overrides.frame10}
                              className={classNames(
                                projectcss.all,
                                sty.frame10
                              )}
                            >
                              <div
                                data-plasmic-name={"aboutNike"}
                                data-plasmic-override={overrides.aboutNike}
                                className={classNames(
                                  projectcss.all,
                                  sty.aboutNike
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__y4MYo
                                  )}
                                >
                                  {"About Nike"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"news"}
                                data-plasmic-override={overrides.news}
                                className={classNames(projectcss.all, sty.news)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vpe68
                                  )}
                                >
                                  {"News"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"careers"}
                                data-plasmic-override={overrides.careers}
                                className={classNames(
                                  projectcss.all,
                                  sty.careers
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t48Q4
                                  )}
                                >
                                  {"Careers"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"investors"}
                                data-plasmic-override={overrides.investors}
                                className={classNames(
                                  projectcss.all,
                                  sty.investors
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bzsi0
                                  )}
                                >
                                  {"Investors"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"sustainability"}
                                data-plasmic-override={overrides.sustainability}
                                className={classNames(
                                  projectcss.all,
                                  sty.sustainability
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9S4N
                                  )}
                                >
                                  {"Sustainability"}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame11"}
                          data-plasmic-override={overrides.frame11}
                          className={classNames(projectcss.all, sty.frame11)}
                        >
                          <div
                            data-plasmic-name={"frame12"}
                            data-plasmic-override={overrides.frame12}
                            className={classNames(projectcss.all, sty.frame12)}
                          >
                            <Frame6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5R1H1
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"frame13"}
                            data-plasmic-override={overrides.frame13}
                            className={classNames(projectcss.all, sty.frame13)}
                          >
                            <Frame7Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nf1Zm
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"frame14"}
                            data-plasmic-override={overrides.frame14}
                            className={classNames(projectcss.all, sty.frame14)}
                          >
                            <Frame8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hejuk
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"frame15"}
                            data-plasmic-override={overrides.frame15}
                            className={classNames(projectcss.all, sty.frame15)}
                          >
                            <Frame9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jYXbp
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame16"}
                        data-plasmic-override={overrides.frame16}
                        className={classNames(projectcss.all, sty.frame16)}
                      >
                        <div
                          data-plasmic-name={"frame17"}
                          data-plasmic-override={overrides.frame17}
                          className={classNames(projectcss.all, sty.frame17)}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"autoLayoutHorizontal"}
                            data-plasmic-override={
                              overrides.autoLayoutHorizontal
                            }
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.autoLayoutHorizontal
                            )}
                          >
                            <div
                              data-plasmic-name={"frame18"}
                              data-plasmic-override={overrides.frame18}
                              className={classNames(
                                projectcss.all,
                                sty.frame18
                              )}
                            >
                              <Frame10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uaUw
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qyka
                              )}
                            >
                              {"India"}
                            </div>
                          </p.Stack>
                          <div
                            data-plasmic-name={"_2023NikeIncAllRightsReserved"}
                            data-plasmic-override={
                              overrides._2023NikeIncAllRightsReserved
                            }
                            className={classNames(
                              projectcss.all,
                              sty._2023NikeIncAllRightsReserved
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__damWq
                              )}
                            >
                              {"© 2023 Nike, Inc. All Rights Reserved"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame19"}
                          data-plasmic-override={overrides.frame19}
                          className={classNames(projectcss.all, sty.frame19)}
                        >
                          <div
                            data-plasmic-name={"guides"}
                            data-plasmic-override={overrides.guides}
                            className={classNames(projectcss.all, sty.guides)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xyjBp
                              )}
                            >
                              {"Guides"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"termsOfSale"}
                            data-plasmic-override={overrides.termsOfSale}
                            className={classNames(
                              projectcss.all,
                              sty.termsOfSale
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qU7YS
                              )}
                            >
                              {"Terms of Sale"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"termsOfUse"}
                            data-plasmic-override={overrides.termsOfUse}
                            className={classNames(
                              projectcss.all,
                              sty.termsOfUse
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2QcI
                              )}
                            >
                              {"Terms of Use"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"nikePrivacyPolicy"}
                            data-plasmic-override={overrides.nikePrivacyPolicy}
                            className={classNames(
                              projectcss.all,
                              sty.nikePrivacyPolicy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Xme1
                              )}
                            >
                              {"Nike Privacy Policy"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </ph.DataCtxReader>
          </GraphqlFetcher>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "graphQlFetcher",
    "freeBox",
    "frame",
    "frame20",
    "frame21",
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header",
    "container",
    "group2",
    "group",
    "titleHeader",
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7",
    "frame34",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved",
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  graphQlFetcher: [
    "graphQlFetcher",
    "freeBox",
    "frame",
    "frame20",
    "frame21",
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header",
    "container",
    "group2",
    "group",
    "titleHeader",
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7",
    "frame34",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved",
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  freeBox: [
    "freeBox",
    "frame",
    "frame20",
    "frame21",
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header",
    "container",
    "group2",
    "group",
    "titleHeader",
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7",
    "frame34",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved",
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  frame: [
    "frame",
    "frame20",
    "frame21",
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31",
    "frame32",
    "frame33"
  ],

  frame20: [
    "frame20",
    "frame21",
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31",
    "frame32",
    "frame33"
  ],

  frame21: [
    "frame21",
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2",
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31"
  ],

  frame22: [
    "frame22",
    "newFeatured2",
    "men2",
    "women2",
    "kids2",
    "sale2",
    "snkrs2"
  ],

  newFeatured2: ["newFeatured2"],
  men2: ["men2"],
  women2: ["women2"],
  kids2: ["kids2"],
  sale2: ["sale2"],
  snkrs2: ["snkrs2"],
  frame23: [
    "frame23",
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28",
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30",
    "frame31"
  ],

  frame24: [
    "frame24",
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28"
  ],

  frame25: [
    "frame25",
    "frame26",
    "frame27",
    "search2",
    "autoLayoutHorizontal7",
    "frame28"
  ],

  frame26: ["frame26", "frame27", "search2"],
  frame27: ["frame27", "search2"],
  search2: ["search2"],
  autoLayoutHorizontal7: ["autoLayoutHorizontal7", "frame28"],
  frame28: ["frame28"],
  autoLayoutHorizontal8: [
    "autoLayoutHorizontal8",
    "autoLayoutHorizontal9",
    "frame29",
    "autoLayoutHorizontal10",
    "frame30"
  ],

  autoLayoutHorizontal9: ["autoLayoutHorizontal9", "frame29"],
  frame29: ["frame29"],
  autoLayoutHorizontal10: ["autoLayoutHorizontal10", "frame30"],
  frame30: ["frame30"],
  frame31: ["frame31"],
  frame32: ["frame32", "frame33"],
  frame33: ["frame33"],
  header: ["header", "container", "group2", "group", "titleHeader"],
  container: ["container"],
  group2: ["group2", "group", "titleHeader"],
  group: ["group", "titleHeader"],
  titleHeader: ["titleHeader"],
  form: [
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7"
  ],

  input: ["input"],
  textArea: ["textArea"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  selectCountry: ["selectCountry"],
  input6: ["input6"],
  input8: ["input8"],
  input7: ["input7"],
  frame34: [
    "frame34",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved",
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  frame2: [
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15",
    "frame16",
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved",
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  frame3: [
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability",
    "frame11",
    "frame12",
    "frame13",
    "frame14",
    "frame15"
  ],

  frame4: [
    "frame4",
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts",
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries",
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability"
  ],

  frame5: [
    "frame5",
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts"
  ],

  frame6: [
    "frame6",
    "findAStore",
    "becomeAMember",
    "signUpForEmail",
    "sendUsFeedback",
    "studentDiscounts"
  ],

  findAStore: ["findAStore"],
  becomeAMember: ["becomeAMember"],
  signUpForEmail: ["signUpForEmail"],
  sendUsFeedback: ["sendUsFeedback"],
  studentDiscounts: ["studentDiscounts"],
  frame7: [
    "frame7",
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries"
  ],

  frame8: [
    "frame8",
    "getHelp",
    "orderStatus",
    "delivery",
    "returns",
    "paymentOptions",
    "contactUsOnNikecomInquiries",
    "contactUsOnAllOtherInquiries"
  ],

  getHelp: ["getHelp"],
  orderStatus: ["orderStatus"],
  delivery: ["delivery"],
  returns: ["returns"],
  paymentOptions: ["paymentOptions"],
  contactUsOnNikecomInquiries: ["contactUsOnNikecomInquiries"],
  contactUsOnAllOtherInquiries: ["contactUsOnAllOtherInquiries"],
  frame9: [
    "frame9",
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability"
  ],

  frame10: [
    "frame10",
    "aboutNike",
    "news",
    "careers",
    "investors",
    "sustainability"
  ],

  aboutNike: ["aboutNike"],
  news: ["news"],
  careers: ["careers"],
  investors: ["investors"],
  sustainability: ["sustainability"],
  frame11: ["frame11", "frame12", "frame13", "frame14", "frame15"],
  frame12: ["frame12"],
  frame13: ["frame13"],
  frame14: ["frame14"],
  frame15: ["frame15"],
  frame16: [
    "frame16",
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved",
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  frame17: [
    "frame17",
    "autoLayoutHorizontal",
    "frame18",
    "_2023NikeIncAllRightsReserved"
  ],

  autoLayoutHorizontal: ["autoLayoutHorizontal", "frame18"],
  frame18: ["frame18"],
  _2023NikeIncAllRightsReserved: ["_2023NikeIncAllRightsReserved"],
  frame19: [
    "frame19",
    "guides",
    "termsOfSale",
    "termsOfUse",
    "nikePrivacyPolicy"
  ],

  guides: ["guides"],
  termsOfSale: ["termsOfSale"],
  termsOfUse: ["termsOfUse"],
  nikePrivacyPolicy: ["nikePrivacyPolicy"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAddNewAddress__ArgProps,
          internalVariantPropNames: PlasmicAddNewAddress__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddNewAddress__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddNewAddress";
  } else {
    func.displayName = `PlasmicAddNewAddress.${nodeName}`;
  }
  return func;
}

export const PlasmicAddNewAddress = Object.assign(
  // Top-level PlasmicAddNewAddress renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    frame: makeNodeComponent("frame"),
    frame20: makeNodeComponent("frame20"),
    frame21: makeNodeComponent("frame21"),
    frame22: makeNodeComponent("frame22"),
    newFeatured2: makeNodeComponent("newFeatured2"),
    men2: makeNodeComponent("men2"),
    women2: makeNodeComponent("women2"),
    kids2: makeNodeComponent("kids2"),
    sale2: makeNodeComponent("sale2"),
    snkrs2: makeNodeComponent("snkrs2"),
    frame23: makeNodeComponent("frame23"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    frame26: makeNodeComponent("frame26"),
    frame27: makeNodeComponent("frame27"),
    search2: makeNodeComponent("search2"),
    autoLayoutHorizontal7: makeNodeComponent("autoLayoutHorizontal7"),
    frame28: makeNodeComponent("frame28"),
    autoLayoutHorizontal8: makeNodeComponent("autoLayoutHorizontal8"),
    autoLayoutHorizontal9: makeNodeComponent("autoLayoutHorizontal9"),
    frame29: makeNodeComponent("frame29"),
    autoLayoutHorizontal10: makeNodeComponent("autoLayoutHorizontal10"),
    frame30: makeNodeComponent("frame30"),
    frame31: makeNodeComponent("frame31"),
    frame32: makeNodeComponent("frame32"),
    frame33: makeNodeComponent("frame33"),
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    group2: makeNodeComponent("group2"),
    group: makeNodeComponent("group"),
    titleHeader: makeNodeComponent("titleHeader"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    selectCountry: makeNodeComponent("selectCountry"),
    input6: makeNodeComponent("input6"),
    input8: makeNodeComponent("input8"),
    input7: makeNodeComponent("input7"),
    frame34: makeNodeComponent("frame34"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    findAStore: makeNodeComponent("findAStore"),
    becomeAMember: makeNodeComponent("becomeAMember"),
    signUpForEmail: makeNodeComponent("signUpForEmail"),
    sendUsFeedback: makeNodeComponent("sendUsFeedback"),
    studentDiscounts: makeNodeComponent("studentDiscounts"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    getHelp: makeNodeComponent("getHelp"),
    orderStatus: makeNodeComponent("orderStatus"),
    delivery: makeNodeComponent("delivery"),
    returns: makeNodeComponent("returns"),
    paymentOptions: makeNodeComponent("paymentOptions"),
    contactUsOnNikecomInquiries: makeNodeComponent(
      "contactUsOnNikecomInquiries"
    ),
    contactUsOnAllOtherInquiries: makeNodeComponent(
      "contactUsOnAllOtherInquiries"
    ),
    frame9: makeNodeComponent("frame9"),
    frame10: makeNodeComponent("frame10"),
    aboutNike: makeNodeComponent("aboutNike"),
    news: makeNodeComponent("news"),
    careers: makeNodeComponent("careers"),
    investors: makeNodeComponent("investors"),
    sustainability: makeNodeComponent("sustainability"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    frame13: makeNodeComponent("frame13"),
    frame14: makeNodeComponent("frame14"),
    frame15: makeNodeComponent("frame15"),
    frame16: makeNodeComponent("frame16"),
    frame17: makeNodeComponent("frame17"),
    autoLayoutHorizontal: makeNodeComponent("autoLayoutHorizontal"),
    frame18: makeNodeComponent("frame18"),
    _2023NikeIncAllRightsReserved: makeNodeComponent(
      "_2023NikeIncAllRightsReserved"
    ),
    frame19: makeNodeComponent("frame19"),
    guides: makeNodeComponent("guides"),
    termsOfSale: makeNodeComponent("termsOfSale"),
    termsOfUse: makeNodeComponent("termsOfUse"),
    nikePrivacyPolicy: makeNodeComponent("nikePrivacyPolicy"),
    // Metadata about props expected for PlasmicAddNewAddress
    internalVariantProps: PlasmicAddNewAddress__VariantProps,
    internalArgProps: PlasmicAddNewAddress__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddNewAddress;
/* prettier-ignore-end */
